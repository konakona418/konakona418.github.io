<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>炮打 EasyX</title>
    <link href="/2025/06/30/%E7%82%AE%E6%89%93-EasyX/"/>
    <url>/2025/06/30/%E7%82%AE%E6%89%93-EasyX/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>TL;DR</strong>：EasyX 就是纯纯的垃圾，别用。入门建议用 SFML。</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>之前一直没写什么东西，现在期末考完没啥事情正好写一点。</p></blockquote><p>这个学期软院开了个什么”信息技术基础认知与实践“的课，就是期末提出来那么两周，每周两次，每次四个课时给你写代码，要求最后一个人能写个小项目。我选的是 C++ 方向。然后我把之前选课指导里面写的东西贴在这里：</p><blockquote><p>主要内容包括面向对象设计模式、操作系统与应用程序、句柄与回调函数设计、消息映射、软件项目管理、游戏设计基础、图形动画处理等。要求学生掌握面向对象设计模试；掌握操作系统与应用程序关系；了解程序与柄关系；掌握软件产生与周期；掌握游戏开发流程，场景；掌握常用图形处理API；并通过完整的项目案例分析和成果展示，使学生掌握桌面应用项目开发的流程，培养团队协作的能力。其中，面向对象设计模式和游戏设计基础是学习重点，操作系统与应用程序和软件项目管理是难点。</p></blockquote><p>好吧……其实这个地方是画了很大个大饼。首先之前就没给人讲过的环境配置这次还是没讲清楚，构建系统仍然是讲都不讲，最后不知道从哪里掏出来个 VC++6 我一口老血差点没吐出来，然后上面的人在那讲，下面的人傻呵呵的跟着做，不是你们都不觉得哪里有问题吗？然后版本控制也不介绍。最后，四四十六个课时，后八个课时讲了一点面向对象和项目组织，有节课 lecturer 嗯是被一个简单的循环依赖问题硬控整整一个半小时；前八个课时全在讲 EasyX，我们今天的主角。</p><h2 id="炮打-EasyX：作为垃圾的入门框架"><a href="#炮打-EasyX：作为垃圾的入门框架" class="headerlink" title="炮打 EasyX：作为垃圾的入门框架"></a>炮打 EasyX：作为垃圾的入门框架</h2><blockquote><p>优点？为什么要谈优点？</p><p>as if 我只要谈了优点，就有什么人就会连连说，萌哥中肯，分析井井有条还不失客观性一样，或者 EasyX 的孝子贤孙们（存在这种人吗？）看到了就不会对我有意见一样。</p><p>显然，我是来批判的，不是来装中肯的。虚情假意写一点优点不如不写。</p></blockquote><p>主要针对 EasyX 及其作者个人存在的以下几个重大问题（甚至毫不客气地说，重大弊病）进行讨论。</p><ol><li><p>API 严重的平台特定性</p></li><li><p>糟糕的设计和令人不明所以的文档</p></li><li><p>作者本人令人迷惑的运营能力</p></li></ol><h3 id="严重的平台特定性问题"><a href="#严重的平台特定性问题" class="headerlink" title="严重的平台特定性问题"></a>严重的平台特定性问题</h3><p>这个东西真的是一看便知。首先让我们看到 <code>easyx.h</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>I mean, what the hell?</strong></p><p>一上来就给人干绷不住了。如果 EasyX 只是个学生作业我觉得无可厚非，但是 EasyX 在事实上已经一个被很多机构甚至是部分高校用作教学的得到广泛应用的项目了，然而这么一个项目却根本没法覆盖到全部场景——你凭什么假定我就使用的是 Windows？这时候有人就要说了，你装个 MinGW 工具链不就好了。没错，但是作为一个大项目就要有大项目的担当。一方面标榜着 Easy，一方面又要让<strong>刚刚入门的用户</strong>去事必躬亲地处理各种细节问题，我认为这么做并不合适。</p><p>EasyX 事实上仅仅是在 GDI 外面套了薄薄的一层壳子，<strong>封装了约等于没有封装，简化了约等于没简化</strong>，那么我就想问了，用它的意义何在，为什么我不直接去调 GDI。</p><h3 id="垃圾的设计、垃圾的文档"><a href="#垃圾的设计、垃圾的文档" class="headerlink" title="垃圾的设计、垃圾的文档"></a>垃圾的设计、垃圾的文档</h3><p>首先，命名极其随意。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">COLORREF <span class="hljs-title">getlinecolor</span><span class="hljs-params">()</span></span>;            <span class="hljs-comment">// Get line color</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setlinecolor</span><span class="hljs-params">(COLORREF color)</span></span>;    <span class="hljs-comment">// Set line color</span><br><span class="hljs-function">COLORREF <span class="hljs-title">gettextcolor</span><span class="hljs-params">()</span></span>;            <span class="hljs-comment">// Get text color</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">settextcolor</span><span class="hljs-params">(COLORREF color)</span></span>;    <span class="hljs-comment">// Set text color</span><br><span class="hljs-function">COLORREF <span class="hljs-title">getfillcolor</span><span class="hljs-params">()</span></span>;            <span class="hljs-comment">// Get fill color</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setfillcolor</span><span class="hljs-params">(COLORREF color)</span></span>;    <span class="hljs-comment">// Set fill color</span><br></code></pre></td></tr></table></figure><p>好的，我们注意到作者同志似乎不太喜欢断句。这种非 camel case 非 snake case 的颇具淳古之风的没有脑血栓想不出来的命名法实在是令人大为震撼。不过至少还算中立邪恶，没有用拼音或者谜之缩写……</p><p><strong>没有吗？</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">COLORREF <span class="hljs-title">getbkcolor</span><span class="hljs-params">()</span></span>;                <span class="hljs-comment">// Get background color</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setbkcolor</span><span class="hljs-params">(COLORREF color)</span></span>;    <span class="hljs-comment">// Set background color</span><br></code></pre></td></tr></table></figure><p>当我没说。好的我又想问了，作者同志是真的惜字如金啊，一个 background 嗯是给他缩写成 bk 了。好好写完一个词很难吗。有没有一种可能现在大家写代码都有提示了，多写点少写点其实没有什么区别。如果作者同志真的想要整点仿古的北欧性冷淡极简风代码给我这种土鳖开开眼，为什么不缩写成 C 标准库里面那种 6 字神人函数名。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">settxc</span><span class="hljs-params">(...)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setbkc</span><span class="hljs-params">(...)</span></span>;<br></code></pre></td></tr></table></figure><p>可能我确实有点极端了，至少人家命名风格还是相对统一的……</p><p><strong>是这样吗？</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BeginBatchDraw</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">// Begin batch drawing mode</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FlushBatchDraw</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">// Refreshes the undisplayed drawing</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FlushBatchDraw</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> top, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> bottom)</span></span>;    <span class="hljs-comment">// Refreshes the undisplayed drawing</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EndBatchDraw</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">// End batch drawing mode and refreshes the undisplayed drawing</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EndBatchDraw</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> top, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> bottom)</span></span>;    <span class="hljs-comment">// End batch drawing mode and refreshes the undisplayed drawing</span><br></code></pre></td></tr></table></figure><p>哦怎么又变成 big camel case 了。作者同志终于想起来世界上居然还有断句这种东西了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InputBox</span><span class="hljs-params">(LPTSTR pString, <span class="hljs-type">int</span> nMaxCount, LPCTSTR pPrompt = <span class="hljs-literal">NULL</span>, LPCTSTR pTitle = <span class="hljs-literal">NULL</span>, LPCTSTR pDefault = <span class="hljs-literal">NULL</span>, <span class="hljs-type">int</span> width = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> height = <span class="hljs-number">0</span>, <span class="hljs-type">bool</span> bOnlyOK = <span class="hljs-literal">true</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>然后参数也从之前的乱来风格（一会匈牙利一会作者最爱的不断句魔改版匈牙利）改成匈牙利了。不禁令人好奇他到底想要干什么。</p><p>有人说，这不是尬黑吗？至少人家一个系列的 API ——一个 API 族——内部风格是统一的！你这属于是找些莫名其妙的借口抹黑我们 EasyX。还给你搞上 family 了！咱们 Vulkan 分功能有 Queue family，EasyX 分功能有 API family，一个 family 里面的东西才是 consistent 的，不是一个 family 就不保证各方面的 consistency，非常高级，接轨国际！好嘛……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Image related functions</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loadimage</span><span class="hljs-params">(IMAGE *pDstImg, LPCTSTR pImgFile, <span class="hljs-type">int</span> nWidth = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> nHeight = <span class="hljs-number">0</span>, <span class="hljs-type">bool</span> bResize = <span class="hljs-literal">false</span>)</span></span>;                    <span class="hljs-comment">// Load image from a file (bmp/gif/jpg/png/tif/emf/wmf/ico)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loadimage</span><span class="hljs-params">(IMAGE *pDstImg, LPCTSTR pResType, LPCTSTR pResName, <span class="hljs-type">int</span> nWidth = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> nHeight = <span class="hljs-number">0</span>, <span class="hljs-type">bool</span> bResize = <span class="hljs-literal">false</span>)</span></span>;    <span class="hljs-comment">// Load image from resources (bmp/gif/jpg/png/tif/emf/wmf/ico)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">saveimage</span><span class="hljs-params">(LPCTSTR pImgFile, IMAGE* pImg = <span class="hljs-literal">NULL</span>)</span></span>;                                                                        <span class="hljs-comment">// Save image to a file (bmp/gif/jpg/png/tif)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getimage</span><span class="hljs-params">(IMAGE *pDstImg, <span class="hljs-type">int</span> srcX, <span class="hljs-type">int</span> srcY, <span class="hljs-type">int</span> srcWidth, <span class="hljs-type">int</span> srcHeight)</span></span>;                                                <span class="hljs-comment">// Get image from device</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">putimage</span><span class="hljs-params">(<span class="hljs-type">int</span> dstX, <span class="hljs-type">int</span> dstY, <span class="hljs-type">const</span> IMAGE *pSrcImg, DWORD dwRop = SRCCOPY)</span></span>;                                                <span class="hljs-comment">// Put image to device</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">putimage</span><span class="hljs-params">(<span class="hljs-type">int</span> dstX, <span class="hljs-type">int</span> dstY, <span class="hljs-type">int</span> dstWidth, <span class="hljs-type">int</span> dstHeight, <span class="hljs-type">const</span> IMAGE *pSrcImg, <span class="hljs-type">int</span> srcX, <span class="hljs-type">int</span> srcY, DWORD dwRop = SRCCOPY)</span></span>;        <span class="hljs-comment">// Put image to device</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rotateimage</span><span class="hljs-params">(IMAGE *dstimg, IMAGE *srcimg, <span class="hljs-type">double</span> radian, COLORREF bkcolor = BLACK, <span class="hljs-type">bool</span> autosize = <span class="hljs-literal">false</span>, <span class="hljs-type">bool</span> highquality = <span class="hljs-literal">true</span>)</span></span>;<span class="hljs-comment">// Rotate image</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Resize</span><span class="hljs-params">(IMAGE* pImg, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span>;    <span class="hljs-comment">// Resize the device</span><br><span class="hljs-function">DWORD* <span class="hljs-title">GetImageBuffer</span><span class="hljs-params">(IMAGE* pImg = <span class="hljs-literal">NULL</span>)</span></span>;            <span class="hljs-comment">// Get the display buffer of the graphics device</span><br><span class="hljs-function">IMAGE* <span class="hljs-title">GetWorkingImage</span><span class="hljs-params">()</span></span>;                            <span class="hljs-comment">// Get current graphics device</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetWorkingImage</span><span class="hljs-params">(IMAGE* pImg = <span class="hljs-literal">NULL</span>)</span></span>;            <span class="hljs-comment">// Set current graphics device</span><br><span class="hljs-function">HDC <span class="hljs-title">GetImageHDC</span><span class="hljs-params">(IMAGE* pImg = <span class="hljs-literal">NULL</span>)</span></span>;                <span class="hljs-comment">// Get the graphics device handle</span><br></code></pre></td></tr></table></figure><p><strong>请问这是什么意思？</strong></p><p>一个图形变换能给我整出两套不一样的命名法来，这个作者确实是有水平的。他自己写下面那行的时候能不能看一下自己之前写的啥？</p><p>然后有人又要说了，EasyX 是大项目，要保证 API 的前向兼容性……你能不能把旧的函数用宏或者随便什么东西设成新函数的别名，然后加一个 deprecation warning，相信 EasyX 的作者是做了这个功能的了吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">if</span> _MSC_VER &gt; 1200 &amp;&amp; _MSC_VER &lt; 1900</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> _EASYX_DEPRECATE                    __declspec(deprecated(<span class="hljs-string">&quot;This function is deprecated.&quot;</span>))</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> _EASYX_DEPRECATE_WITHNEW(_NewFunc)    __declspec(deprecated(<span class="hljs-string">&quot;This function is deprecated. Instead, use this new function: &quot;</span> #_NewFunc <span class="hljs-string">&quot;. See https://docs.easyx.cn/&quot;</span> #_NewFunc <span class="hljs-string">&quot; for details.&quot;</span>))</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> _EASYX_DEPRECATE_OVERLOAD(_Func)    __declspec(deprecated(<span class="hljs-string">&quot;This overload is deprecated. See https://docs.easyx.cn/&quot;</span> #_Func <span class="hljs-string">&quot; for details.&quot;</span>))</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> _EASYX_DEPRECATE</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> _EASYX_DEPRECATE_WITHNEW(_NewFunc)</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> _EASYX_DEPRECATE_OVERLOAD(_Func)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>好消息，做了；坏消息，这个功能是 MSVC exclusive 的。</p><p>但是众所周知有一个东西叫做 <code>[[deprecated]]</code> 注解。<strong>莫非你 EasyX 用的就是个古董 C++ 然后一点现代特性都没有吗？那你用 C++ 的意义在哪里啊？</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __cplusplus</span><br><span class="hljs-meta">#<span class="hljs-keyword">error</span> EasyX is only for C++</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>哦，原来用了类啊。<strong>但是对那几个类的操作为什么不是调用方法而是给某些函数传指针啊？我到底写的是 C++ 还是 C 啊我请问了？为什么不直接用 C 写呢？</strong></p><p>再来看看这个。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">getrop2</span><span class="hljs-params">()</span></span>;                        <span class="hljs-comment">// Get binary raster operation mode</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setrop2</span><span class="hljs-params">(<span class="hljs-type">int</span> mode)</span></span>;                <span class="hljs-comment">// Set binary raster operation mode</span><br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">getpolyfillmode</span><span class="hljs-params">()</span></span>;                <span class="hljs-comment">// Get polygon fill mode</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setpolyfillmode</span><span class="hljs-params">(<span class="hljs-type">int</span> mode)</span></span>;        <span class="hljs-comment">// Set polygon fill mode</span><br></code></pre></td></tr></table></figure><p>当时我和我室友看着这几个 <code>mode</code>s out of nowhere 感到无比的迷惑。然后我才反应过来这几个地方是要填 GDI 里面那些常量的。比如前两个就是选择黑&#x2F;白&#x2F;覆盖&#x2F;按位和&#x2F;按位异或&#x2F;按位取反那些的，其实就是封装的 <code>GetROP2</code> 和 <code>SetROP2</code> 两个函数。</p><p><strong>把这里要填哪些值、能填哪些值写出来真的很难吗？</strong></p><p><strong>写个意思清晰点的类型别名很难吗？</strong></p><p>写一个案例，比如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Raster operation mode.</span><br><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// R2_BLACK    : ...</span><br><span class="hljs-comment">// R2_COPYPEN  : ...</span><br><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// See also: https://learn.microsoft.com/...</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> RasterOperationMode;<br><br><span class="hljs-comment">// Get binary raster operation mode</span><br><span class="hljs-function">RasterOperationMode <span class="hljs-title">getrop2</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// Set binary raster operation mode</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setrop2</span><span class="hljs-params">(RasterOperationMode nMode)</span></span>;<br></code></pre></td></tr></table></figure><p>其实我觉得他要真用 C++ 就应该把这些玩意都给包装成 enum class，或者至少包装成个 enum 然后内部去处理 GDI 那些事情。然后他偏不，非要把这些玩意统统给你用户处理，至于用户怎么难受就不是他的问题了。</p><p>另外一个典型例子是这个消息封装。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Message Structure</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ExMessage</span><br>&#123;<br>    USHORT message;                    <span class="hljs-comment">// The message identifier</span><br>    <span class="hljs-keyword">union</span><br>    &#123;<br>        <span class="hljs-comment">// Data of the mouse message</span><br>        <span class="hljs-keyword">struct</span><br>        &#123;<br>            <span class="hljs-type">bool</span> ctrl        :<span class="hljs-number">1</span>;        <span class="hljs-comment">// Indicates whether the CTRL key is pressed</span><br>            <span class="hljs-type">bool</span> shift        :<span class="hljs-number">1</span>;        <span class="hljs-comment">// Indicates whether the SHIFT key is pressed</span><br>            <span class="hljs-type">bool</span> lbutton    :<span class="hljs-number">1</span>;        <span class="hljs-comment">// Indicates whether the left mouse button is pressed</span><br>            <span class="hljs-type">bool</span> mbutton    :<span class="hljs-number">1</span>;        <span class="hljs-comment">// Indicates whether the middle mouse button is pressed</span><br>            <span class="hljs-type">bool</span> rbutton    :<span class="hljs-number">1</span>;        <span class="hljs-comment">// Indicates whether the right mouse button is pressed</span><br>            <span class="hljs-type">short</span> x;                <span class="hljs-comment">// The x-coordinate of the cursor</span><br>            <span class="hljs-type">short</span> y;                <span class="hljs-comment">// The y-coordinate of the cursor</span><br>            <span class="hljs-type">short</span> wheel;            <span class="hljs-comment">// The distance the wheel is rotated, expressed in multiples or divisions of 120</span><br>        &#125;;<br><br>        <span class="hljs-comment">// Data of the key message</span><br>        <span class="hljs-keyword">struct</span><br>        &#123;<br>            BYTE vkcode;            <span class="hljs-comment">// The virtual-key code of the key</span><br>            BYTE scancode;            <span class="hljs-comment">// The scan code of the key. The value depends on the OEM</span><br>            <span class="hljs-type">bool</span> extended    :<span class="hljs-number">1</span>;        <span class="hljs-comment">// Indicates whether the key is an extended key, such as a function key or a key on the numeric keypad. The value is true if the key is an extended key; otherwise, it is false.</span><br>            <span class="hljs-type">bool</span> prevdown    :<span class="hljs-number">1</span>;        <span class="hljs-comment">// Indicates whether the key is previously up or down</span><br>        &#125;;<br><br>        <span class="hljs-comment">// Data of the char message</span><br>        TCHAR ch;<br><br>        <span class="hljs-comment">// Data of the window message</span><br>        <span class="hljs-keyword">struct</span><br>        &#123;<br>            WPARAM wParam;<br>            LPARAM lParam;<br>        &#125;;<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>好吧，关于这个 union 的安全性问题。他也不整一个枚举来区分消息类型，反正你自己去用 <code>WM_*</code> 那些值判断吧，有些字段可能初始化了有些字段没初始化，哪些能用哪些不能用我也不告诉你，你 UB 关我屁事，自己动脑子想想，能跑就行。</p><p>还有那个虚拟键码和键盘扫描码。你猜猜刚入门的同学听得懂你在这里叽叽咕咕的那些东西不？同样是一个 u8 丢在那里就跑了。连个预处理都不肯做。简直懒的令人发指。</p><p>还是那句话：<strong>封装了约等于没有封装，简化了约等于没简化</strong>。</p><p>别的什么诸如滥用全局状态，什么错误处理约等于没有之类的问题我真不想说了。基本的问题都解决不了，还指望这个作者能干什么呢。</p><p>可能这就是大佬吧，我的境界不够高，洞见不了他深邃的超凡脱俗的设计思想。</p><p>说实话我这段时间学 Vulkan API 的时候看那些东西都没有看 EasyX 那么难受。Vulkan 只是单纯的东西多而杂，不是烂，该有的设计规范人家一点不缺。</p><h3 id="作者垃圾的运营能力"><a href="#作者垃圾的运营能力" class="headerlink" title="作者垃圾的运营能力"></a>作者垃圾的运营能力</h3><p><strong>事情是不管的，惨是不哭不行的。代码是不放出来的，钱也是不赚的。问题是不修的，先把书卖出去就行。</strong></p><p>我很好奇什么时候他能让大家 build from source。也不知道他抱着这个破烂的代码不放只提供静态库是准备待价而沽还是怎么的。谁去找他买这个玩意谁简直瞎了眼了。</p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>非常不利于学生进行图形学入门。也不利于 C++ 学习。</p><p>学完以后几乎获得不了任何有用的知识和设计经验。对于图形学原理的理解还是一坨浆糊。</p><p><img src="/img/post/2025-06/01/01.jpg"></p><h2 id="结语：感觉不如"><a href="#结语：感觉不如" class="headerlink" title="结语：感觉不如"></a>结语：感觉不如</h2><p><strong>感觉不如 SFML。</strong></p><p>个人认为 SFML 是一个非常优秀的入门级图形库。门槛很低，入门很简单。但上限也很高，可以接 ImGUI，可以接 Spine 做小人动画，可以写 GLSL 做花里胡哨的效果。学下来也会对图形学里面的一些基本概念有一个认知。API 设计也非常现代。</p><p>找一个最基本的功能来和 EasyX 比较一下。这是 SFML 的事件处理：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span> (<span class="hljs-keyword">auto</span> event = window-&gt;<span class="hljs-built_in">pollEvent</span>()) &#123;<br>    <span class="hljs-keyword">if</span> (event.<span class="hljs-built_in">has_value</span>()) &#123;<br>        <span class="hljs-keyword">if</span> (event-&gt;<span class="hljs-built_in">is</span>&lt;sf::Event::Closed&gt;()) &#123;<br>            window-&gt;<span class="hljs-built_in">close</span>();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (event-&gt;<span class="hljs-built_in">is</span>&lt;sf::Event::KeyPressed&gt;()) &#123;<br>            sf::KeyBoard::Key keyCode = event-&gt;<span class="hljs-built_in">getIf</span>&lt;sf::Event::KeyPressed&gt;()-&gt;code;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>std::optional</code> 一个可空，有事件就是非空，没有就是 <code>std::nullopt</code> 非常安全，而且显式。然后 <code>Event::is()</code> 内部是用模板元编程整的一个判断，如果判断成功了就返回变体类型 <code>std::holds_alternative</code> 的结果。 <code>getIf</code> 也是一个道理。非常现代，非常美观。<code>KeyBoard::Key</code> 是一个枚举类，里面哪个键是哪个映射的清清楚楚。</p><p>这不比 EasyX 强太多了。</p><p>我的建议是以后把 EasyX 踢到历史垃圾堆里面算了。反正我已经找到细糠吃了，EasyX 谁爱用谁用。这玩意我自己光看着都难受。</p><p><img src="/img/post/2025-06/01/02.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>图形学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>赛后反思</title>
    <link href="/2025/06/29/%E8%B5%9B%E5%90%8E%E5%8F%8D%E6%80%9D/"/>
    <url>/2025/06/29/%E8%B5%9B%E5%90%8E%E5%8F%8D%E6%80%9D/</url>
    
    <content type="html"><![CDATA[<p>给我的感觉就是世界是一个巨大的写死，在那个文档写的不明不白不清不楚的平台上整半天视觉还不如写死来的直接。之后给小登培训的时候也要教他们写死，大家一起写死，大家一起摆烂，大家一起得奖，大家一起加综测，大家一起永垂不朽。</p>]]></content>
    
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 C++ 中实现反射的一种简易方案</title>
    <link href="/2025/03/19/%E5%9C%A8-C-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%B0%84%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%80%E6%98%93%E6%96%B9%E6%A1%88/"/>
    <url>/2025/03/19/%E5%9C%A8-C-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%B0%84%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%80%E6%98%93%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>众所周知，C++并没有像许多语言（例如 C# 或者 Java）那样的反射（Reflection）机制，也没有类似于 Rust 的所谓过程宏（Procedural Macro）来间接实现类似的效果。虽然说大部分场景并不会涉及到类似的需求，但是一旦涉及到就非常令人头大。在这些场景下，往往需要依赖工具提供的额外支持，或者极其复杂的宏机制来达到这样的效果，案例包括 Qt 中的反射和 GDExtension 的 GDOBJECT。</p><p>这里给出一种比较简单的、不依赖于额外工具的侵入式反射实现。</p><p>简略起见（其实是因为我只做了这些），这里主要介绍类的成员和方法的反射。</p><h2 id="对于类成员变量"><a href="#对于类成员变量" class="headerlink" title="对于类成员变量"></a>对于类成员变量</h2><p>这里主要讨论 <code>const MemberType</code> 和 <code>MemberType</code> 的普通的成员变量。<code>static MemberType</code> 不在讨论的范畴内。</p><p>对于 <code>ClassType</code> 类的 <code>member</code> 成员，我们可以通过 <code>&amp;ClassType::member</code> 来获得成员变量的指针，其类型为 <code>ClassType::MemberType*</code>。</p><p>我们可以使用一个自动推导类型模板参数（C++17 引入）传入这个指针。接着，用 <code>decltype()</code> 拿到他的类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">auto</span> Member&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">register_member</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; name)</span> </span>&#123;<br>    <span class="hljs-keyword">using</span> MemberTypeFull = <span class="hljs-keyword">decltype</span>(Member);<br>&#125;<br></code></pre></td></tr></table></figure><p>累了先不写了，改天续上。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025 年初 揭阳-潮州-汕头纪行</title>
    <link href="/2025/02/22/2025-%E5%B9%B4%E5%88%9D-%E6%8F%AD%E9%98%B3-%E6%BD%AE%E5%B7%9E-%E6%B1%95%E5%A4%B4%E7%BA%AA%E8%A1%8C/"/>
    <url>/2025/02/22/2025-%E5%B9%B4%E5%88%9D-%E6%8F%AD%E9%98%B3-%E6%BD%AE%E5%B7%9E-%E6%B1%95%E5%A4%B4%E7%BA%AA%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>当时寒假前本来是准备假期做点正事的，但是真的放假以后，反而没啥心情去干正事了，每天不是爽食就是上网，可以说是饱食终日无所用心了。然后年后正好有这么一个契机出去耍耍，觉得没必要再拿《CSAPP》没看完之类的奇葩理由（就那个精神状况给我两个寒假都磨叽不完）搪塞了，所以直接就去了。现在正好有点时间，把照片整理一下，虽然说也没拍啥。</p><h2 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h2><p>从绵阳机场飞揭阳的飞机，上午的。说起来之前绵阳修机场的时候有人非常反对，觉得大而无当，一直骂；现在机场发挥作用了，又开始夸当初修机场那家伙有先见之明了。然而很显然的事实就是，修机场那家伙肯定不是高瞻远瞩，然后先验地知道绵阳未来十几年会有这种需求——其本质一言以蔽之，纯粹就是吃饱了撑的。本意是不好的——但是现在给执行好了。</p><p>刚起飞的时候没有看见绵中。不过看不看都无所谓。很奇怪，离开高中以后，我是没有多么浓烈的 nostalgia 的，倒是偶尔会成为噩梦素材。不念旧这点不知道是不是好事。不过尽量向前看肯定不是坏事。</p><p>飞了两个半小时，就差不多到揭阳上面了。</p><p><img src="/img/post/2025-02/01/01.jpg" alt="img" title="榕江，远处的桥梁系榕江大桥。"></p><p>说起来揭阳这个机场的格局也挺有意思：它大概处在揭阳-潮州-汕头三座城市构成的类等边三角形的中心。所以说叫“揭阳潮汕”机场倒也合理，四个字把三个地方都囊括了。</p><h2 id="揭阳-day1"><a href="#揭阳-day1" class="headerlink" title="揭阳 day1"></a>揭阳 day1</h2><p>落地以后租了辆车就往市区住的地方开。</p><p>当晚去了骑楼街（高德上全称“揭阳古城中山骑楼街”），开车去的路上人都给我开麻了，全是车，一路堵过去的——不过过年嘛，也正常。最后把车停在了某个神必的犄角旮旯里，旁边还有个渡口，人员渡河只要几块钱。</p><p><img src="/img/post/2025-02/01/02.jpg" alt="img" title="渡口"></p><p>骑楼街里面整的挺花哨，有卖本地产的吃的。当然这地方也未能免俗——还是有人卖古镇经典特产之牛皮糖。不过似乎没有另一个古镇经典特产——音像店。</p><p><img src="/img/post/2025-02/01/03.jpg" alt=" "></p><p><img src="/img/post/2025-02/01/04.jpg" alt=" "></p><p>顺便去骑楼街旁边的揭阳学宫看了一眼。城隍庙就没去了。</p><p><img src="/img/post/2025-02/01/05.jpg" alt="img" title="揭阳学宫门口的照壁"></p><p><img src="/img/post/2025-02/01/06.jpg" alt="img" title="揭阳学宫本体，到的时候已经关门了，这是把手从栅栏缝伸进去拍的"></p><p>从骑楼街出来买了份鹅吃。白味的，要沾沾水吃。总的来说味道不错，但是没拍照片。</p><h2 id="揭阳-day2"><a href="#揭阳-day2" class="headerlink" title="揭阳 day2"></a>揭阳 day2</h2><p>上午去揭阳忘了哪个地方（导航里面数据谜之失踪了）看当地庆祝活动。有英歌舞看，但是不知道为什么没拍下来。</p><p>看完以后去一个牛肉火锅店吃了午饭。人气还是相当火爆的。据说楼上楼下有一百桌，不知道是不是有夸大的成分在。另外不得不说那家店任务调度是真厉害，接待效率相当可以，去了不用等位置，很快就能吃上。</p><p>牛肉和锅没有拍，拍了个牛肉菠萝包。不知道是自己构建的还是 pre-built 的，但尝起来还算不赖。</p><p><img src="/img/post/2025-02/01/07.jpg" alt="img" title="菠萝包，相当扎实的一个"></p><p>吃完饭就往阳美走。</p><p>阳美据说是因为做玉石生意，整个村子都很有钱。——实际上，乍一看，这个村子已经像个小县城一样了。</p><p>又找了个犄角旮旯把车停那里了。</p><p>下午到的时候，阳美那里正好也是有英歌舞。不过阳美这边还有另外两个活动：一是看人家放炮仗，二是有个所谓“火把节”。</p><p>炮仗乒乒乓乓地从 7 点一直放到 9 点，阵仗看着有点吓人，不得不说是真的烧钱……</p><p><img src="/img/post/2025-02/01/08.jpg" alt=" "></p><p><img src="/img/post/2025-02/01/09.jpg" alt=" "></p><p>然后就是火把节。</p><p><img src="/img/post/2025-02/01/10.jpg" alt=" "></p><p>用的是煤油作燃料，味道不是一般的熏，洗了老半天才洗掉。</p><p>晚上回去洗头一股烟硝味。我还算离得远的了，难以想象凑跟前看的人能被熏成什么样子。</p><h2 id="汕头-day3"><a href="#汕头-day3" class="headerlink" title="汕头 day3"></a>汕头 day3</h2><p>忘了哪里了，似乎是凤岗？</p><p><img src="/img/post/2025-02/01/11.jpg" alt=" " title="注意看画面中央扛标旗的女生的花篮：初音未来"></p><p>不得不说这个场面还是有点意思的。前现代性和后现代性在这一刻达成了某种奇异的……共谋？总之还是挺神奇的。——另外，据说十年前扛标旗的“MM”们还是杀马特造型呢，相比之下现在的这种其实已经很温和了……</p><p>到了汕头市区吃了个肠粉，店门口还贴个了隋坡师傅的大照片。我是喜欢看他的号，也就是那个“特厨隋卞”上面发的视频的，内容比较有意思。（我是不是有诉诸权威的嫌疑？）</p><p><img src="/img/post/2025-02/01/12.jpg" alt=" " title="肠粉"></p><p>味道还可以。回瓜大之后，在海天苑美食广场也吃了肠粉，我说真不如广东的（是不是过分苛责你瓜的厨师师傅了？）你瓜也有个所谓煲仔饭，但是一点不香，充其量只能算盖浇饭换了个小锅装着。</p><p><img src="/img/post/2025-02/01/13.jpg" alt=" " title="汕头海湾大桥"></p><p>然后去小公园，实际上是个仿古建筑群。车停在附近的体育馆的地下车库，收费非常便宜，而且没啥人停。</p><p>小公园中间有个亭子，如图所示。</p><p><img src="/img/post/2025-02/01/14.jpg" alt=" " title="画面右侧的就是。另外不知道谁的奶龙气球飘在空中"></p><p>我去的时候人还不算多，旁边买了杯瑞幸还能坐那里喝一会。后两天去的人才是真的爽，看照片上面人挤人——要我说，挤的跟豆豉鲮鱼罐头里面的鱼一样，有什么去的必要嘛……</p><p><img src="/img/post/2025-02/01/15.jpg" alt=" "></p><p><img src="/img/post/2025-02/01/16.jpg" alt=" " title="汕头旅社"></p><p>然后走之前去看了一眼汕头旅社。这个地方更是网红打卡典中点，拥塞了一堆人在那里摆各种花里胡哨的 pose 拍照。另外当时衣服没穿够，感觉有点冷了，远远的拍了张就撤了。</p><p><img src="/img/post/2025-02/01/17.jpg" alt=" " title="仍然是海湾大桥"></p><p>当晚吃了只沙姜鸡，总体来说不错。</p><h2 id="汕头-day4"><a href="#汕头-day4" class="headerlink" title="汕头 day4"></a>汕头 day4</h2><p>在汕头周边瞎逛。</p><p>有个什么庙。但是庙我没有拍，拍了旁边建在海边的火电厂。</p><p><img src="/img/post/2025-02/01/18.jpg" alt=" " title="火电厂的烟囱"></p><p>下面这个不知道是火电厂的什么建筑。</p><p><img src="/img/post/2025-02/01/19.jpg" alt=" "></p><p>不禁让我想起某部早期无厘头喜剧电影 <em>The Naked Gun</em> 里面的一个段子。</p><p><img src="/img/post/2025-02/01/20.jpg" alt=" "></p><p>中午在旁边渔村吃了个海鲜大排档，价格比较公道，分量还算实在。</p><p>本来准备下午就往南澳岛上走的，无奈上岛方向大排长龙，想了想还是再等一会吧。</p><p>先去石炮台公园转了几圈。没有拍照。</p><p>晚饭随便对付了一下，然后往岛上去。过桥费往返需要接近一百块钱。</p><p><img src="/img/post/2025-02/01/21.jpg" alt=" " title="南澳大桥"></p><p><img src="/img/post/2025-02/01/22.jpg" alt=" " title="南澳岛上面一个小的灯塔，景点作用应该高于实用作用"></p><h2 id="南澳-day5"><a href="#南澳-day5" class="headerlink" title="南澳 day5"></a>南澳 day5</h2><p>围着岛开了一圈。感觉可看的东西比较有限。</p><p><img src="/img/post/2025-02/01/23.jpg" alt=" " title="“北回归线标记”"></p><p>嗯……主要是打卡意义。其实这附近不好看。同时还有个卖烤串的摊子一直用奇响无比的声音播放劲爆音乐，就算景色漂亮也很难有啥心情吧……</p><p><img src="/img/post/2025-02/01/24.jpg" alt=" " title="“彩虹海”"></p><p>这个景点有点意味不明。我最早以为彩虹海是水里面长了藻类之类的导致水体颜色不一，后来才知道所谓彩虹海就是养生蚝的彩色浮筒……</p><p>到底是什么人起的这么些稀奇古怪的名字？</p><p>当晚到了潮州，远远的拍了张牌坊街的照片。这个角度是一个居民楼的顶部，上去的人太多，住家直接摆了个凳子在那里，收想要上天台的游客的小费，非常好玩。</p><p><img src="/img/post/2025-02/01/25.jpg" alt=" " title="牌坊街远景"></p><p>当然我设备不好，拍出来效果很一般。</p><h2 id="潮州-day6"><a href="#潮州-day6" class="headerlink" title="潮州 day6"></a>潮州 day6</h2><p>第二天早上去看广济桥。</p><p>广济桥是个浮桥，晚上拆掉供大型船只过，白天再合上供行人过。不过现在更多是一种表演性质的仪式了。</p><p><img src="/img/post/2025-02/01/26.jpg" alt=" " title="广济桥（未合拢状态）"></p><p>本来说的是九点开始合桥，结果不知道和春节假期有没有关系，拖到了十点半，结束更是等到十一点去了。正好把旁边的下水门城楼和牌坊街（昨天没有进去）逛了。</p><p><img src="/img/post/2025-02/01/27.jpg" alt=" "></p><p>牌坊街商业化程度有点高，给我的感觉一般。</p><p>当晚去看了烧火龙。烧火龙之前先要烧鱼和凤凰。有不明真相的游客把鱼当作火龙，看完鱼也不问一下就急匆匆的跑了，这真是……</p><p><img src="/img/post/2025-02/01/28.jpg" alt=" "></p><p><img src="/img/post/2025-02/01/29.jpg" alt=" " title="图中即为“火龙”"></p><h2 id="返程"><a href="#返程" class="headerlink" title="返程"></a>返程</h2><p>当天早上开去德安里逛了一圈。当地修了个小博物馆，不要门票，里面放了一些稀奇古怪的文物。展厅光线有点欠佳，但总的来说诚意是有的。</p><p>买了份米肠吃。</p><p>然后直接开到机场去，还车，回家。（是否结束的过于草率了？）</p><p><img src="/img/post/2025-02/01/30.jpg" alt=" "></p>]]></content>
    
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人麻了</title>
    <link href="/2025/02/21/%E4%BA%BA%E9%BA%BB%E4%BA%86/"/>
    <url>/2025/02/21/%E4%BA%BA%E9%BA%BB%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>配这个 GDExtension 给我整麻了，Windows Build 默认使用 Windows 那套 API 进行动态库加载，然后我这个 MinGW 编译的不知为何就完全用不了。这事情之前就有人提过不知道为何没有解决。总之给我整道心破碎了，就这样吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Godot Extension 开发环境配置踩坑</title>
    <link href="/2025/02/21/Godot-Extension-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/"/>
    <url>/2025/02/21/Godot-Extension-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>上一篇文章介绍了我配置 ffmpeg 开发环境的过程。这篇文章介绍配置 Godot Extension （GDExtension）开发环境过程中踩的一些坑。</p><p>众所周知，Godot 引擎在 4.x 大版本伊始就将旧的 GDNative 插件系统更换为了更先进（大约）的GDExtension 系统。其开发团队希望这套新系统是向后兼容的，然而不幸的是因为种种原因，minor version 0 和 1 之间就不兼容了。不过这不是今天介绍的重点。</p><p>我现在正在使用 Godot 4.2，开发环境为 Clion。</p><h2 id="怎么构建静态库？"><a href="#怎么构建静态库？" class="headerlink" title="怎么构建静态库？"></a>怎么构建静态库？</h2><h3 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h3><p>对于构建开发 GDExtension 所需的 godot-cpp 库，官方给出的说法是使用 scons 构建系统，并且附上了相应的脚本。实际上如果你平时使用过这个，当然可以按照官方的说法搞。但我平时不用这个。另外比较坑的一点是这个脚本不会输出它使用的编译器，导致开始我编译静态库用的是 MSVC，弄到 Clion 那边编译插件动态库时候用的 MinGW，然后一直链接失败……所以说还是要注意一下。</p><h3 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h3><p>官方也给出了使用 CMake 构建的方案。该怎么编译怎么编译就是了。</p><h2 id="怎么写-CMakeList？"><a href="#怎么写-CMakeList？" class="headerlink" title="怎么写 CMakeList？"></a>怎么写 CMakeList？</h2><p>因为我用的 Clion，然后构建系统用的 CMake，所以说这上面要花点工夫。官方的样例代码 <code>godot-cpp/test</code> 里面有一个 CMakeList，可以作为参考。</p><p>我的项目架构如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs text">/src<br>/thirdparty<br>├─godot_cpp<br>│  ├─bin # static lib<br>│  ├─gd_extension<br>│  │  └─gdextension_interface.h<br>│  ├─gen<br>│  │  ├─include<br>│  │  │  └─godot_cpp<br>│  │  │      ├─classes<br>│  │  │      ├─core<br>│  │  │      └─variant<br>│  │  └─src<br>│  │      ├─classes<br>│  │      └─variant<br>│  └─include<br>│      └─godot_cpp<br>│          ├─classes<br>│          ├─core<br>│          ├─templates<br>│          └─variant<br>└─libavx # ffmpeg<br>    ├─bin<br>    ├─include<br>    │  ├─libavcodec<br>    │  ├─libavdevice<br>    │  ├─libavfilter<br>    │  ├─libavformat<br>    │  ├─libavutil<br>    │  ├─libpostproc<br>    │  ├─libswresample<br>    │  └─libswscale<br>    └─lib<br>        └─pkgconfig<br></code></pre></td></tr></table></figure><p>注意 <code>godot-cpp/include</code> <code>godot-cpp/gen/include</code> <code>godot-cpp/gd_extension</code> 里面的头文件都要导入！</p><p>并且最后还需要链接刚刚编译好的静态库。</p><p>我的 CMakeList 如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.29</span>)<br><span class="hljs-keyword">project</span>(godot_ffmpeg)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">ON</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_EXTENSIONS <span class="hljs-keyword">OFF</span>)<br><br><span class="hljs-keyword">set</span>(BUILD_AS_GODOT_EXTENSION <span class="hljs-keyword">ON</span>)<br><span class="hljs-keyword">set</span>(GODOT_EXTENSION_PLATFORM <span class="hljs-string">&quot;windows&quot;</span>)<br><span class="hljs-keyword">set</span>(GODOT_EXTENSION_TARGETED_BITS <span class="hljs-number">64</span>)<br><span class="hljs-keyword">set</span>(GODOT_EXTENSION_BUILD_TEMPLATE <span class="hljs-string">&quot;release&quot;</span>)<br><br><span class="hljs-keyword">file</span>(GLOB_RECURSE SOURCES <span class="hljs-string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/src/*.c**&quot;</span>)<br><span class="hljs-keyword">file</span>(GLOB_RECURSE HEADERS <span class="hljs-string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/src/*.h**&quot;</span>)<br><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/thirdparty/libavx/<span class="hljs-keyword">include</span>)<br><br><span class="hljs-keyword">link_directories</span>(<span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/thirdparty/libavx/lib)<br><br><span class="hljs-keyword">if</span> (BUILD_AS_GODOT_EXTENSION)<br><br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Building as Godot extension.&quot;</span>)<br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Platform: $&#123;GODOT_EXTENSION_PLATFORM&#125;&quot;</span>)<br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Targeted bits: $&#123;GODOT_EXTENSION_TARGETED_BITS&#125;&quot;</span>)<br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Build template: $&#123;GODOT_EXTENSION_BUILD_TEMPLATE&#125;&quot;</span>)<br><br>    <span class="hljs-keyword">set</span>(GODOT_GDEXTENSION_DIR <span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/thirdparty/godot_cpp/gd_extension)<br>    <span class="hljs-keyword">set</span>(CPP_BINDINGS_PATH <span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/thirdparty/godot_cpp)<br>    <span class="hljs-keyword">set</span>(CPP_LIB_PATH <span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/thirdparty/godot_cpp/bin)<br><br>    <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;GODOT_GDEXTENSION_DIR&#125;</span>)<br>    <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CPP_BINDINGS_PATH&#125;</span>/<span class="hljs-keyword">include</span>)<br>    <span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;CPP_BINDINGS_PATH&#125;</span>/gen/<span class="hljs-keyword">include</span>)<br><br>    <span class="hljs-keyword">link_directories</span>(<span class="hljs-variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/thirdparty/godot_cpp/bin/)<br><br>    <span class="hljs-keyword">add_library</span>(godot_ffmpeg SHARED <span class="hljs-variable">$&#123;SOURCES&#125;</span> <span class="hljs-variable">$&#123;HEADERS&#125;</span>)<br><span class="hljs-keyword">else</span> ()<br><br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Building as standalone executable.&quot;</span>)<br>    <span class="hljs-keyword">add_executable</span>(godot_ffmpeg <span class="hljs-variable">$&#123;SOURCES&#125;</span> <span class="hljs-variable">$&#123;HEADERS&#125;</span>)<br><br><span class="hljs-keyword">endif</span> ()<br><br><span class="hljs-keyword">if</span> (BUILD_AS_GODOT_EXTENSION)<br><br>    <span class="hljs-keyword">target_include_directories</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span><br>            PRIVATE<br>                <span class="hljs-variable">$&#123;CPP_BINDINGS_PATH&#125;</span>/<span class="hljs-keyword">include</span><br>                <span class="hljs-variable">$&#123;CPP_BINDINGS_PATH&#125;</span>/gen/<span class="hljs-keyword">include</span><br>                <span class="hljs-variable">$&#123;GODOT_GDEXTENSION_DIR&#125;</span><br>    )<br><br><span class="hljs-keyword">endif</span> ()<br><br><span class="hljs-keyword">target_link_libraries</span>(<br>        godot_ffmpeg<br>        PRIVATE<br>        avcodec<br>        avdevice<br>        avfilter<br>        avformat<br>        avutil<br>        postproc<br>        swresample<br>        swscale<br>)<br><br><span class="hljs-keyword">if</span> (BUILD_AS_GODOT_EXTENSION)<br><br>    <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;Linking from: $&#123;CPP_LIB_PATH&#125;/libgodot-cpp.$&#123;GODOT_EXTENSION_PLATFORM&#125;.$&#123;GODOT_EXTENSION_BUILD_TEMPLATE&#125;.$&#123;GODOT_EXTENSION_TARGETED_BITS&#125;.a&quot;</span>)<br><br>    <span class="hljs-keyword">target_link_libraries</span>(godot_ffmpeg PRIVATE<br>            <span class="hljs-variable">$&#123;CPP_LIB_PATH&#125;</span>/libgodot-cpp.<span class="hljs-variable">$&#123;GODOT_EXTENSION_PLATFORM&#125;</span>.<span class="hljs-variable">$&#123;GODOT_EXTENSION_BUILD_TEMPLATE&#125;</span>.<span class="hljs-variable">$&#123;GODOT_EXTENSION_TARGETED_BITS&#125;</span>.a)<br><br><span class="hljs-keyword">endif</span> ()<br></code></pre></td></tr></table></figure><p>以上。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Godot</tag>
      
      <tag>CMake</tag>
      
      <tag>游戏开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg libav C++ 开发环境配置踩坑</title>
    <link href="/2025/02/20/ffmpeg-libav-C-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/"/>
    <url>/2025/02/20/ffmpeg-libav-C-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这段时间突发奇想，想要给 Godot 引擎的视频组件做一个 ffmpeg 的兼容层，整完这个就做 CS61B 的 lab 去了。今天晚上上完离散数学已经差不多九点了，以为配个环境应该要不了半小时，结果中间出各种问题，一直折腾到现在。现在把配置工作差不多做完了，顺便把踩的坑记录一下。</p><h2 id="几个关键问题"><a href="#几个关键问题" class="headerlink" title="几个关键问题"></a>几个关键问题</h2><h3 id="下载版本的选择"><a href="#下载版本的选择" class="headerlink" title="下载版本的选择"></a>下载版本的选择</h3><p>说实话 Windows 系统在这种时候就极其拉垮，开始下了全部源文件准备自己编译，结果 Windows 这边就出各种奇异搞笑问题。所以我的建议是，如果用 Windows 系统，最好还是去下预编译的版本吧……省事又省心。</p><p>一个预编译版本可在 <a href="https://www.ffmpeg.org/download.html">ffmpeg 官网</a> 找到。</p><p><img src="/img/post/2025-02/00/ffmpeg-site.png" alt="ffmpeg site download" title="红框中所示"></p><p>进入 Release 中下载 Windows 的包，解压缩。</p><h3 id="CMake-项目架构"><a href="#CMake-项目架构" class="headerlink" title="CMake 项目架构"></a>CMake 项目架构</h3><p>首先把 lib include 目录都放到正确的地方。例如我这里：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">Project/<br>    thirdparty/<br>        libavx/<br>            include/<br>                libavcodec/<br>                    ...<br>                libavdevice/<br>                    ...<br>            lib/<br>                ...<br><br>    src/<br>        main.cpp<br></code></pre></td></tr></table></figure><p>然后 CMakeList.txt 文件我是这么写的：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.29</span>)<br><span class="hljs-keyword">project</span>(godot_ffmpeg)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><br><span class="hljs-keyword">include_directories</span>(thirdparty/libavx/<span class="hljs-keyword">include</span>)<br><span class="hljs-keyword">link_directories</span>(thirdparty/libavx/lib)<br><br><span class="hljs-keyword">add_executable</span>(godot_ffmpeg src/main.cpp)<br><br><span class="hljs-keyword">target_link_libraries</span>(<br>        godot_ffmpeg<br>        avcodec<br>        avdevice<br>        avfilter<br>        avformat<br>        avutil<br>        postproc<br>        swresample<br>        swscale<br>)<br></code></pre></td></tr></table></figure><p>这样 CMakeList 算是勉强配置好了。</p><h3 id="使用-C-调用-ffmpeg-函数"><a href="#使用-C-调用-ffmpeg-函数" class="headerlink" title="使用 C++ 调用 ffmpeg 函数"></a>使用 C++ 调用 ffmpeg 函数</h3><p>我这里创建的是一个 C++ 项目（因为 GDExtension 提供的是 C++ API）开始编译的时候报 <code>undefined reference to xxx</code>，这个解决起来简单，加个 <code>extern &quot;C&quot;</code> 的事情。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;libavcodec/avcodec.h&gt;</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;libavformat/avformat.h&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h3><p>现在可以正常过编译了，但是运行时直接退出，返回 <code>-1073741515 (0xC0000135)</code>。这个是因为没有找到动态链接库导致的。把刚才下载的预编译包的 bin 里的 dll 复制到输出目录下面即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;libavcodec/avcodec.h&gt;</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;libavformat/avformat.h&gt;</span></span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    AVFormatContext* avFormatContext = <span class="hljs-built_in">avformat_alloc_context</span>();<br>    <span class="hljs-keyword">if</span> (avFormatContext == <span class="hljs-literal">nullptr</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;avFormatContext is nullptr&quot;</span> &lt;&lt; std::endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;avFormatContext is not nullptr&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-built_in">avformat_free_context</span>(avFormatContext);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行正常输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">avcodec_alloc_context success<br></code></pre></td></tr></table></figure><p>以上。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>音视频处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次运算符优先级导致的 ROS 服务执行逻辑不符预期的问题</title>
    <link href="/2025/02/20/%E8%AE%B0%E4%B8%80%E6%AC%A1-ROS-%E6%9C%8D%E5%8A%A1%E6%89%A7%E8%A1%8C%E9%80%BB%E8%BE%91%E4%B8%8D%E7%AC%A6%E9%A2%84%E6%9C%9F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2025/02/20/%E8%AE%B0%E4%B8%80%E6%AC%A1-ROS-%E6%9C%8D%E5%8A%A1%E6%89%A7%E8%A1%8C%E9%80%BB%E8%BE%91%E4%B8%8D%E7%AC%A6%E9%A2%84%E6%9C%9F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><strong>按：这文章我自己写出来都想笑。绕了一大圈发现错误无比简单。</strong></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>几天前，我一位室友 A 君在做学校某竞赛小组的入组考核项目。此项目其中一个子任务的要求如下：</p><ul><li><p>有一个服务端 Ser；</p></li><li><p>有两个客户端 Cli1，Cli2；</p></li><li><p>Cli1 和 Cli2 会各自向 Ser 发送一个数字，但是发送顺序未知；</p></li><li><p>Ser 需要将两数的加和返回给 Cli1 和Cli2。</p></li></ul><p>设计上采用了状态机：共计三个状态，Send、Polling 和 Fetched。对于客户端 CliX，默认处于 Send 状态，发送数字给 Ser 后进入 Polling 状态轮询计算结果，服务端会返回一个新的状态——如果计算好了就是 Fetched 附带结果，否则还是 Polling。</p><h2 id="问题发生"><a href="#问题发生" class="headerlink" title="问题发生"></a>问题发生</h2><p>服务端用一个计数器来维护目前获得的数字数量。计数器不会重置，只会对 2 求余判断是不是两个数字都被获取了。如果是，就会重置加和值。</p><p>这部分我帮 A 君做了，然后求余的地方故意装了个小X用的按位和。结果跑起来发现逻辑不对：那个 if branch 根本没有进去，里面的重置加和值的逻辑也没有执行，这是为什么？</p><p>可以看一下伪代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> fetchCounter = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> sumCounter = <span class="hljs-number">0</span>;<br><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">callBack</span><span class="hljs-params">(Request&amp; req, Response&amp; resp)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (req.clientState == State::SEND) &#123;<br>        sum += req.num;<br>        sumCounter ++;<br>        resp.newState = State::POLLING;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (req.clientState == State::POLLING) &#123;<br>        <span class="hljs-keyword">if</span> (sumCounter % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            resp.newState = State::FETCHED;<br>            resp.sum = sum;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            resp.newState = State::POLLING;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (req.clientState == State::FETCHED) &#123;<br>        fetchCounter ++;<br>        resp.newState = State::SEND;<br><br>        <span class="hljs-comment">/* 从这个地方…… */</span><br>        <span class="hljs-keyword">if</span> (fetchCounter &amp; <span class="hljs-number">1</span> == <span class="hljs-number">0</span>) &#123;<br>            sum = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-comment">/* ……到这个地方都没执行 */</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>是啊，所以到底为什么呢？</p><h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><p>首先打了几个 <code>ROS_INFO</code> 进去，进行比较没慧根的调试。发现那个 if 分支确实无论如何都不会被执行。所以我怀疑这一整个 if 都被优化掉了，打开 Compiler Explorer 看看吧。</p><p>上述问题代码可以写成以下简化形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>; <br><span class="hljs-type">int</span> b;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (a &amp; <span class="hljs-number">1</span> == <span class="hljs-number">0</span>) &#123;<br>        b = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 gcc 14.2 生成得到以下汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nasm">a:<br>        .zero   4<br>b:<br>        .zero   4<br>main:<br>        pushq   %rbp<br>        movq    %rsp, %rbp<br>        movl    $0, %eax<br>        popq    %rbp<br>        ret<br></code></pre></td></tr></table></figure><p>可以看到 if 分支确实没了。那我缺的逻辑这块谁给我补啊？</p><p>一开始我怀疑是因为计数器默认是 0 然后编译器进行静态优化了，而且 callBack 函数基本上是放在 the middle of nowhere，可能编译器误判了，以为计数器不会被更新？那这也太夸张了吧。</p><p>那传统派呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>; <br><span class="hljs-type">int</span> b;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (a % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>        b = <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nasm">a:<br>        .zero   4<br>b:<br>        .zero   4<br>main:<br>        pushq   %rbp<br>        movq    %rsp, %rbp<br>        movl    a(%rip), %eax<br>        andl    $1, %eax<br>        testl   %eax, %eax<br>        jne     .L2<br>        movl    $2, b(%rip)<br>.L2:<br>        movl    $0, %eax<br>        popq    %rbp<br>        ret<br></code></pre></td></tr></table></figure><p>怎么又正常了？莫非对位运算和对求模的优化策略还不一样？</p><p>结果最后是什么原因呢……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>; <br><span class="hljs-type">int</span> b;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ((a &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &#123;<br>        b = <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此代码得到结果正常。</p><p>居然是沟槽的运算符优先级……首先这个 <code>== 0</code> 就比较挫，用一个 <code>!</code> 解决的事情，不知道当时为什么这么写了，错误还很隐蔽……</p><p><code>1 == 0</code> 先结合了得到 0，然后 <code>a &amp; 0</code> 恒等于 0，编译器自然是要优化掉这块的啦……</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>出这种问题确实有点笨蛋了。不过运算符优先级这种事情我之前确实没太深究过。真的会有人为了考试去嗯背那个吗？</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/19/hello-world/"/>
    <url>/2025/02/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
